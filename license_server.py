#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify
import hashlib
import time
import json
import os
from datetime import datetime, timedelta

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
LICENSES = {
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π HWID
    "YOUR_HWID_HERE": {
        "user_name": "Makaron",
        "subscription_duration": 3600,  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "max_uses": 1000,  # –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        "created_at": int(time.time()),
        "last_used": 0,
        "use_count": 0
    }
}

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
SECRET_KEY = "FloraVisuals2024SecretKey"

def generate_signature(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
    message = f"{data}{SECRET_KEY}"
    return hashlib.sha256(message.encode()).hexdigest()

def validate_license(hwid):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    if hwid not in LICENSES:
        return False, "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    license_data = LICENSES[hwid]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if license_data["use_count"] >= license_data["max_uses"]:
        return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    current_time = int(time.time())
    license_created = license_data["created_at"]
    duration = license_data["subscription_duration"]
    
    if current_time > license_created + duration:
        return False, "–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞"
    
    return True, "–õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"

@app.route('/')
def home():
    railway_url = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
    base_url = f"https://{railway_url}" if railway_url else f"http://localhost:{os.environ.get('PORT', 5000)}"
    
    return jsonify({
        "message": "FloraVisuals License Server",
        "version": "1.0",
        "status": "online",
        "base_url": base_url,
        "endpoints": {
            "check_license": f"{base_url}/check_license",
            "admin_panel": f"{base_url}/admin/licenses?key=admin123",
            "license_info": f"{base_url}/get_license_info?hwid=YOUR_HWID"
        }
    })

@app.route('/check_license', methods=['POST'])
def check_license():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        data = request.get_json()
        
        if not data or 'hwid' not in data:
            return jsonify({
                "valid": False,
                "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            }), 400
        
        hwid = data['hwid']
        is_valid, message = validate_license(hwid)
        
        if is_valid:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            LICENSES[hwid]["last_used"] = int(time.time())
            LICENSES[hwid]["use_count"] += 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            current_time = int(time.time())
            license_created = LICENSES[hwid]["created_at"]
            duration = LICENSES[hwid]["subscription_duration"]
            expiration_time = license_created + duration
            remaining_time = max(0, expiration_time - current_time)
            
            response_data = {
                "valid": True,
                "message": message,
                "user_name": LICENSES[hwid]["user_name"],
                "expiration_time": expiration_time,
                "remaining_time": remaining_time,
                "use_count": LICENSES[hwid]["use_count"],
                "max_uses": LICENSES[hwid]["max_uses"]
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
            signature = generate_signature(json.dumps(response_data, sort_keys=True))
            response_data["signature"] = signature
            
            return jsonify(response_data)
        else:
            return jsonify({
                "valid": False,
                "message": message
            }), 403
            
    except Exception as e:
        return jsonify({
            "valid": False,
            "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }), 500

@app.route('/get_license_info', methods=['GET'])
def get_license_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    hwid = request.args.get('hwid')
    
    if not hwid or hwid not in LICENSES:
        return jsonify({
            "error": "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }), 404
    
    license_data = LICENSES[hwid].copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Ç–∞–µ–º—ã–µ –¥–∞—Ç—ã
    license_data["created_at_readable"] = datetime.fromtimestamp(license_data["created_at"]).strftime("%Y-%m-%d %H:%M:%S")
    license_data["last_used_readable"] = datetime.fromtimestamp(license_data["last_used"]).strftime("%Y-%m-%d %H:%M:%S") if license_data["last_used"] > 0 else "–ù–∏–∫–æ–≥–¥–∞"
    
    return jsonify(license_data)

@app.route('/admin/licenses', methods=['GET'])
def admin_licenses():
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ª–∏—Ü–µ–Ω–∑–∏–π"""
    admin_key = request.args.get('key')
    
    if admin_key != "admin123":  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}), 403
    
    result = {}
    for hwid, data in LICENSES.items():
        result[hwid] = {
            "user_name": data["user_name"],
            "created_at": datetime.fromtimestamp(data["created_at"]).strftime("%Y-%m-%d %H:%M:%S"),
            "last_used": datetime.fromtimestamp(data["last_used"]).strftime("%Y-%m-%d %H:%M:%S") if data["last_used"] > 0 else "–ù–∏–∫–æ–≥–¥–∞",
            "use_count": data["use_count"],
            "max_uses": data["max_uses"],
            "status": "–ê–∫—Ç–∏–≤–Ω–∞" if data["use_count"] < data["max_uses"] and int(time.time()) <= data["created_at"] + data["subscription_duration"] else "–ò—Å—Ç–µ–∫–ª–∞"
        }
    
    return jsonify(result)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"Starting FloraVisuals License Server on port {port}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL Railway
    railway_url = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
    railway_project_id = os.environ.get('RAILWAY_PROJECT_ID')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway
    print("üîç Railway Environment Variables:")
    for key, value in os.environ.items():
        if 'RAILWAY' in key.upper():
            print(f"   {key} = {value}")
    
    if railway_url:
        print(f"üåê External URL: https://{railway_url}")
        print(f"üîó License check endpoint: https://{railway_url}/check_license")
        print(f"üìä Admin panel: https://{railway_url}/admin/licenses?key=admin123")
    elif railway_project_id:
        # –ï—Å–ª–∏ –µ—Å—Ç—å project ID, –Ω–æ –Ω–µ—Ç domain
        print(f"üåê Railway Project ID: {railway_project_id}")
        print(f"üîó Try this URL: https://{railway_project_id}.up.railway.app")
        print(f"üîó License check endpoint: https://{railway_project_id}.up.railway.app/check_license")
        print(f"üìä Admin panel: https://{railway_project_id}.up.railway.app/admin/licenses?key=admin123")
    else:
        print("üåê Local development mode")
        print(f"üîó License check endpoint: http://localhost:{port}/check_license")
        print(f"üìä Admin panel: http://localhost:{port}/admin/licenses?key=admin123")
        print("üí° To get Railway URL: Go to Railway Dashboard ‚Üí Settings ‚Üí Networking ‚Üí Generate Domain")
    
    print("=" * 50)
    app.run(host='0.0.0.0', port=port, debug=False)
